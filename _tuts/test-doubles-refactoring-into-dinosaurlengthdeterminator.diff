diff --git a/src/AppBundle/Service/DinosaurLengthDeterminator.php b/src/AppBundle/Service/DinosaurLengthDeterminator.php
new file mode 100644
index 0000000..0b41576
--- /dev/null
+++ b/src/AppBundle/Service/DinosaurLengthDeterminator.php
@@ -0,0 +1,33 @@
+<?php
+
+namespace AppBundle\Service;
+
+use AppBundle\Entity\Dinosaur;
+
+class DinosaurLengthDeterminator
+{
+    public function getLengthFromSpecification(string $specification): int
+    {
+        $availableLengths = [
+            'huge' => ['min' => Dinosaur::HUGE, 'max' => 100],
+            'omg' => ['min' => Dinosaur::HUGE, 'max' => 100],
+            'ðŸ˜±' => ['min' => Dinosaur::HUGE, 'max' => 100],
+            'large' => ['min' => Dinosaur::LARGE, 'max' => Dinosaur::HUGE - 1],
+        ];
+        $minLength = 1;
+        $maxLength = Dinosaur::LARGE - 1;
+
+        foreach (explode(' ', $specification) as $keyword) {
+            $keyword = strtolower($keyword);
+
+            if (array_key_exists($keyword, $availableLengths)) {
+                $minLength = $availableLengths[$keyword]['min'];
+                $maxLength = $availableLengths[$keyword]['max'];
+
+                break;
+            }
+        }
+
+        return random_int($minLength, $maxLength);
+    }
+}
diff --git a/tests/AppBundle/Service/DinosaurLengthDeterminatorTest.php b/tests/AppBundle/Service/DinosaurLengthDeterminatorTest.php
new file mode 100644
index 0000000..966f4a2
--- /dev/null
+++ b/tests/AppBundle/Service/DinosaurLengthDeterminatorTest.php
@@ -0,0 +1,37 @@
+<?php
+
+namespace Tests\AppBundle\Service;
+
+use AppBundle\Entity\Dinosaur;
+use AppBundle\Service\DinosaurLengthDeterminator;
+use PHPUnit\Framework\TestCase;
+
+class DinosaurLengthDeterminatorTest extends TestCase
+{
+    /**
+     * @dataProvider getSpecLengthTests
+     */
+    public function testItReturnsCorrectLengthRange($spec, $minExpectedSize, $maxExpectedSize)
+    {
+        $determinator = new DinosaurLengthDeterminator();
+        $actualSize = $determinator->getLengthFromSpecification($spec);
+
+        $this->assertGreaterThanOrEqual($minExpectedSize, $actualSize);
+        $this->assertLessThanOrEqual($maxExpectedSize, $actualSize);
+    }
+
+    public function getSpecLengthTests()
+    {
+        return [
+            // specification, min length, max length
+            ['large carnivorous dinosaur', Dinosaur::LARGE, Dinosaur::HUGE - 1],
+            'default response' => ['give me all the cookies!!!', 0, Dinosaur::LARGE - 1],
+            ['large herbivore', Dinosaur::LARGE, Dinosaur::HUGE - 1],
+            ['huge dinosaur', Dinosaur::HUGE, 100],
+            ['huge dino', Dinosaur::HUGE, 100],
+            ['huge', Dinosaur::HUGE, 100],
+            ['OMG', Dinosaur::HUGE, 100],
+            ['ðŸ˜±', Dinosaur::HUGE, 100],
+        ];
+    }
+}
